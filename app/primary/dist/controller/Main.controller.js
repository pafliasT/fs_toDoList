sap.ui.define(["sap/ui/core/mvc/Controller","sap/m/MessageToast","sap/m/MessageBox","sap/ui/model/json/JSONModel","sap/ui/model/Sorter","sap/ui/model/Filter","sap/ui/model/FilterOperator","sap/m/ColumnListItem","sap/m/Text","sap/m/Input","sap/m/Button","sap/m/CheckBox"],function(t,e,o,s,i,n,d,r,c,l,a,p){"use strict";return t.extend("com.todolist.primary.controller.Main",{onInit:function(){const t=new s({selectedTodoList:null,mode:"HideMode"});this.getView().setModel(t,"state");this.updateTodoListStatistics()},onSelectTodoList:function(t){const e=t.getSource().getBindingContext().getProperty("ID");console.log(e);this.selectTodoList(e)},onCreateTodoList:function(){const t="/todoapi/createTodoList";const s={ID:uuid.v4(),name:"New List"};axios.post(t,s).then(function(){e.show("Todo List created successfully!");this.byId("todolist-panel").getBinding("content").refresh();this.updateTodoListStatistics();console.log(s.ID);this.selectTodoList(s.ID);this.onStartEditTodoList()}.bind(this)).catch(function(t){const e=t&&t.responseJSON&&t.responseJSON.error?t.responseJSON.error.message:"An unexpected error occurred";o.error(e,{title:"Error Creating Todo List"})})},onStartEditTodoList:function(){const t=this.byId("todolist-title");const e=this.byId("todolist-title-input");t.setVisible(false);e.setVisible(true);e.attachChange(this.onInputChange,this);setTimeout(function(){const t=e.getDomRef("inner");if(t&&t.select){t.select()}},0)},onInputChange:function(t){const e=t.getSource();const o=e.getValue();const s=this.byId("todolist-title");const i=this.byId("todolist-panel");s.setText(o);i.getBinding("content").refresh();this.updateTodoListStatistics();this.byId("todolist-title").setVisible(true);e.setVisible(false)},onFinishEditTodoList:function(){const t=this.byId("todolist-title");const e=this.byId("todolist-title-input");const o=this.byId("todolist-panel");t.setText(e.getValue());o.getBinding("content").refresh();this.updateTodoListStatistics();t.setVisible(true);e.setVisible(false)},onDeleteTodoList:function(){const t="/todoapi/deleteTodoList";const s={ID:this.getView().getModel("state").getProperty("/selectedTodoList")};axios.post(t,s).then(function(){e.show("Todo List deleted succesfully!");this.getView().getModel("state").setProperty("/selectedTodoList",null);this.byId("todolist-panel").getBinding("content").refresh();this.updateTodoListStatistics()}.bind(this)).catch(function(t){console.log(t);const e=t&&t.responseJSON&&t.responseJSON.error?t.responseJSON.error.message:"An unexpected error occurred";o.error(e,{title:"Error Deleting Todo List"})})},onCreateTodoItem:function(){const t=this.getView().getModel("state").getProperty("/selectedTodoList");const s="/todoapi/createTodoItem";const i={ID:uuid.v4(),name:"New Item",todoList_ID:t};axios.post(s,i).then(function(){e.show("Todo Item created successfully!");this.displayTodoListItems(t);this.updateTodoListStatistics()}.bind(this)).catch(function(t){const e=t&&t.responseJSON&&t.responseJSON.error?t.responseJSON.error.message:"An unexpected error occurred";o.error(e,{title:"Error Creating Todo Item"})})},onStartEditTodoItem:function(t){const e=t.getSource().getParent();const o=e.getCells()[1];const s=new l({value:"{name}"});s.attachSubmit(null,this.onFinishEditTodoItem);e.removeCell(o);e.insertCell(s,1)},onFinishEditTodoItem:function(t){const e=t.getSource().getParent();const o=e.getCells()[1];const s=new c({text:"{name}"});e.removeCell(o);e.insertCell(s,1)},onDeleteTodoItem:function(t){const s=t.getSource().getBindingContext().getProperty("ID");const i=this.getView().getModel("state").getProperty("/selectedTodoList");const n="/todoapi/deleteTodoItem";const d={ID:s};axios.post(n,d).then(function(){e.show("Todo Item deleted succesfully!");this.displayTodoListItems(i);this.updateTodoListStatistics()}.bind(this)).catch(function(t){console.log(t);const e=t&&t.responseJSON&&t.responseJSON.error?t.responseJSON.error.message:"An unexpected error occurred";o.error(e,{title:"Error Deleting Todo Item"})})},bindTodoListNameToMasterTitle:function(t){const e=this.getView().byId("todolist-title");const o=this.getView().byId("todolist-title-input");e.bindElement({path:`/TodoList(${t})`});e.bindProperty("text",{path:`name`});o.bindElement({path:`/TodoList(${t})`});o.bindProperty("value",{path:`name`})},updateTodoListStatistics:function(){this.getOwnerComponent().getModel().bindList("/TodoItem").requestContexts().then(function(t){const e=t.map(t=>t.getObject());const o=new Map;for(const t of e){const e=o.get(t.todoList_ID)||{total:0,complete:0};e.total++;if(t.completed)e.complete++;o.set(t.todoList_ID,e)}const s=this.byId("todolist-panel").getAggregation("content");for(const t of s){const e=t.getBindingContext().getProperty("ID");const s=o.get(e)||{total:0,complete:0};t.getAggregation("tileContent")[0].getAggregation("content").setValue(`${s.complete}/${s.total}`)}}.bind(this))},displayTodoListItems:function(t){const e=this.getView().byId("todolist-items");e.bindAggregation("items",{path:"/TodoItem",sorter:new i("createdAt"),filters:new n("todoList_ID",d.EQ,t),template:new r({cells:[new p({selected:"{completed}",select:this.updateTodoListStatistics.bind(this)}),new c({text:"{name}"}),new a({icon:"sap-icon://edit",type:"Transparent",press:this.onStartEditTodoItem.bind(this)}),new a({icon:"sap-icon://delete",type:"Transparent",press:this.onDeleteTodoItem.bind(this)})]})})},selectTodoList:function(t){this.getView().getModel("state").setProperty("/selectedTodoList",t);this.bindTodoListNameToMasterTitle(t);this.displayTodoListItems(t)}})});